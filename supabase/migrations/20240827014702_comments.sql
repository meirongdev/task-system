drop trigger if exists "tr_tasks_autoset_author_name" on "public"."tasks";

drop function if exists "public"."set_task_author_name"();

create table "public"."comments" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "tenant" text not null,
    "created_by" bigint not null,
    "author_name" text not null,
    "comment_text" text not null,
    "task" bigint not null
);


alter table "public"."comments" enable row level security;

CREATE UNIQUE INDEX comments_pkey ON public.comments USING btree (id);

alter table "public"."comments" add constraint "comments_pkey" PRIMARY KEY using index "comments_pkey";

alter table "public"."comments" add constraint "comments_created_by_fkey" FOREIGN KEY (created_by) REFERENCES app_users(id) not valid;

alter table "public"."comments" validate constraint "comments_created_by_fkey";

alter table "public"."comments" add constraint "comments_task_fkey" FOREIGN KEY (task) REFERENCES tasks(id) not valid;

alter table "public"."comments" validate constraint "comments_task_fkey";

alter table "public"."comments" add constraint "comments_tenant_fkey" FOREIGN KEY (tenant) REFERENCES tenants(id) not valid;

alter table "public"."comments" validate constraint "comments_tenant_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.autoset_author_name()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
NEW.author_name = (select full_name from app_users where supabase_user = auth.uid());
RETURN NEW;
END;$function$
;

CREATE OR REPLACE FUNCTION public.derive_tenant_from_task()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
NEW.tenant = (
select t.tenant from tasks t where t.id=NEW.task
);
RETURN NEW;
END;$function$
;

grant delete on table "public"."comments" to "anon";

grant insert on table "public"."comments" to "anon";

grant references on table "public"."comments" to "anon";

grant select on table "public"."comments" to "anon";

grant trigger on table "public"."comments" to "anon";

grant truncate on table "public"."comments" to "anon";

grant update on table "public"."comments" to "anon";

grant delete on table "public"."comments" to "authenticated";

grant insert on table "public"."comments" to "authenticated";

grant references on table "public"."comments" to "authenticated";

grant select on table "public"."comments" to "authenticated";

grant trigger on table "public"."comments" to "authenticated";

grant truncate on table "public"."comments" to "authenticated";

grant update on table "public"."comments" to "authenticated";

grant delete on table "public"."comments" to "service_role";

grant insert on table "public"."comments" to "service_role";

grant references on table "public"."comments" to "service_role";

grant select on table "public"."comments" to "service_role";

grant trigger on table "public"."comments" to "service_role";

grant truncate on table "public"."comments" to "service_role";

grant update on table "public"."comments" to "service_role";

create policy "delete_by_author"
on "public"."comments"
as permissive
for delete
to authenticated
using (rls_helpers.is_same_user(created_by));


create policy "insert_for_same_tenant"
on "public"."comments"
as permissive
for insert
to authenticated
with check (rls_helpers.has_tenant_access(tenant));


create policy "select for same tenant"
on "public"."comments"
as permissive
for select
to authenticated
using (rls_helpers.has_tenant_access(tenant));


create policy "update_by_author"
on "public"."comments"
as permissive
for update
to authenticated
using (rls_helpers.is_same_user(created_by));


CREATE TRIGGER tr_comments_autoset_author_name BEFORE INSERT ON public.comments FOR EACH ROW EXECUTE FUNCTION autoset_author_name();

CREATE TRIGGER tr_comments_autoset_created_by BEFORE INSERT ON public.comments FOR EACH ROW EXECUTE FUNCTION set_created_by_value();

CREATE TRIGGER tr_comments_set_tenant_id BEFORE INSERT ON public.comments FOR EACH ROW EXECUTE FUNCTION derive_tenant_from_task();

CREATE TRIGGER tr_tasks_autoset_author_name BEFORE INSERT ON public.tasks FOR EACH ROW EXECUTE FUNCTION autoset_author_name();


create schema if not exists "rls_helpers";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION rls_helpers.has_tenant_access(tenant_id text)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$BEGIN
RETURN(
  COALESCE(
    (auth.jwt() -> 'app_metadata' -> 'tenants')?tenant_id, false
  )
);
END;$function$
;

CREATE OR REPLACE FUNCTION rls_helpers.is_same_user(app_user_id bigint)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$BEGIN
RETURN(
EXISTS(
  select from app_users
  where id=app_user_id and supabase_user=auth.uid()
)
);
END;$function$
;


