create type "public"."tasks_status" as enum ('open', 'in_progress', 'canceled', 'information_missing', 'done');

create table "public"."tasks" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "created_by" bigint not null,
    "tenant" text not null,
    "title" text not null,
    "description" text not null,
    "status" tasks_status not null default 'open'::tasks_status,
    "author_name" text
);


alter table "public"."tasks" enable row level security;

CREATE UNIQUE INDEX tasks_pkey ON public.tasks USING btree (id);

alter table "public"."tasks" add constraint "tasks_pkey" PRIMARY KEY using index "tasks_pkey";

alter table "public"."tasks" add constraint "tasks_created_by_fkey" FOREIGN KEY (created_by) REFERENCES app_users(id) not valid;

alter table "public"."tasks" validate constraint "tasks_created_by_fkey";

alter table "public"."tasks" add constraint "tasks_description_check" CHECK ((length(description) >= 10)) not valid;

alter table "public"."tasks" validate constraint "tasks_description_check";

alter table "public"."tasks" add constraint "tasks_tenant_fkey" FOREIGN KEY (tenant) REFERENCES tenants(id) not valid;

alter table "public"."tasks" validate constraint "tasks_tenant_fkey";

alter table "public"."tasks" add constraint "tasks_title_check" CHECK ((length(title) >= 4)) not valid;

alter table "public"."tasks" validate constraint "tasks_title_check";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.set_created_by_value()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
NEW.created_by = (SELECT id FROM app_users WHERE supabase_user = auth.uid());
RETURN NEW;
END;$function$
;

CREATE OR REPLACE FUNCTION public.set_task_author_name()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
NEW.author_name = (select full_name from app_users where supabase_user = auth.uid());
RETURN NEW;
END;$function$
;

grant delete on table "public"."tasks" to "anon";

grant insert on table "public"."tasks" to "anon";

grant references on table "public"."tasks" to "anon";

grant select on table "public"."tasks" to "anon";

grant trigger on table "public"."tasks" to "anon";

grant truncate on table "public"."tasks" to "anon";

grant update on table "public"."tasks" to "anon";

grant delete on table "public"."tasks" to "authenticated";

grant insert on table "public"."tasks" to "authenticated";

grant references on table "public"."tasks" to "authenticated";

grant select on table "public"."tasks" to "authenticated";

grant trigger on table "public"."tasks" to "authenticated";

grant truncate on table "public"."tasks" to "authenticated";

grant update on table "public"."tasks" to "authenticated";

grant delete on table "public"."tasks" to "service_role";

grant insert on table "public"."tasks" to "service_role";

grant references on table "public"."tasks" to "service_role";

grant select on table "public"."tasks" to "service_role";

grant trigger on table "public"."tasks" to "service_role";

grant truncate on table "public"."tasks" to "service_role";

grant update on table "public"."tasks" to "service_role";

create policy "can insert tasks to valid tenants"
on "public"."tasks"
as permissive
for insert
to authenticated
with check (COALESCE((((auth.jwt() -> 'app_metadata'::text) -> 'tenants'::text) ? tenant), false));


create policy "can read from valid tenant"
on "public"."tasks"
as permissive
for select
to authenticated
using (COALESCE((((auth.jwt() -> 'app_metadata'::text) -> 'tenants'::text) ? tenant), false));


CREATE TRIGGER tr_tasks_autoset_author_name BEFORE INSERT ON public.tasks FOR EACH ROW EXECUTE FUNCTION set_task_author_name();

CREATE TRIGGER tr_tasks_autoset_created_by BEFORE INSERT ON public.tasks FOR EACH ROW EXECUTE FUNCTION set_created_by_value();


